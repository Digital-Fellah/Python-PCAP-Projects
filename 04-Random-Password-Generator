# Random Password Generator
# This script generates a random password using functions from the random module.

# Import the necessary functions from the random module
from random import choice, sample, seed

# Define a function to generate a random password
def generate_password(length):
    # Characters to use in the password: uppercase, lowercase, digits, and special characters
    characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()'
    
    # Generate a random password using a sample of the characters
    password = ''.join(sample(characters, length))
    
    # Return the generated password
    return password

# Main part of the script
if __name__ == "__main__":
    # Initialize the random number generator seed (optional for reproducibility)
    seed(42)
    
    # Define the desired length of the password
    password_length = 12
    
    # Generate the random password
    random_password = generate_password(password_length)
    
    # Print the generated password
    print(f"Generated Password: {random_password}")


"""
EXPLANATION OF THE CODE

Import the necessary functions (choice, sample, seed) from the random module.
Define a function generate_password that takes length as a parameter.
Inside the function, define a string characters containing uppercase, lowercase letters, digits, and special characters.
Use the sample function to select length number of characters randomly from the characters string and join them to form a password.
Return the generated password.
In the main part of the script:
Check if the script is run as the main module using if __name__ == "__main__".
Initialize the random number generator seed using seed(42) for reproducibility.
Define the desired length of the password.
Call the generate_password function to generate a random password.
Print the generated password.
"""


"""
NOTIONS COVERED

Import Variants: Using from random import choice, sample, seed to import specific functions from the random module.
Random Module Functions: Using choice(), sample(), and seed() from the random module.
User-Defined Modules: The generate_password function encapsulates the logic for password generation.
__name__ Variable: Differentiating between module execution and import with if __name__ == "__main__".
Public and Private Variables: Variables like characters and password_length used within the function and script scope.
__pycache__ Directory: The script will automatically generate compiled bytecode in the __pycache__ directory when run.
"""
